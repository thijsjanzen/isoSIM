// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_heterozygosity_cpp
double calc_heterozygosity_cpp(NumericVector v);
RcppExport SEXP _isoSIM_calc_heterozygosity_cpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_heterozygosity_cpp(v));
    return rcpp_result_gen;
END_RCPP
}
// select_population_cpp
List select_population_cpp(NumericVector v, NumericVector selectMatrix, double s, int population_size, int run_time, double morgan, int seed, bool writeToFile);
RcppExport SEXP _isoSIM_select_population_cpp(SEXP vSEXP, SEXP selectMatrixSEXP, SEXP sSEXP, SEXP population_sizeSEXP, SEXP run_timeSEXP, SEXP morganSEXP, SEXP seedSEXP, SEXP writeToFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type selectMatrix(selectMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type population_size(population_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type run_time(run_timeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type writeToFile(writeToFileSEXP);
    rcpp_result_gen = Rcpp::wrap(select_population_cpp(v, selectMatrix, s, population_size, run_time, morgan, seed, writeToFile));
    return rcpp_result_gen;
END_RCPP
}
// calculate_summaryStats
List calculate_summaryStats(NumericVector v, int number_of_founders);
RcppExport SEXP _isoSIM_calculate_summaryStats(SEXP vSEXP, SEXP number_of_foundersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_founders(number_of_foundersSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_summaryStats(v, number_of_founders));
    return rcpp_result_gen;
END_RCPP
}
// simulate_from_population
List simulate_from_population(std::string file_name, int total_runtime, double morgan, int number_of_markers, int seed);
RcppExport SEXP _isoSIM_simulate_from_population(SEXP file_nameSEXP, SEXP total_runtimeSEXP, SEXP morganSEXP, SEXP number_of_markersSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< int >::type total_runtime(total_runtimeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_markers(number_of_markersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_from_population(file_name, total_runtime, morgan, number_of_markers, seed));
    return rcpp_result_gen;
END_RCPP
}
// create_population
List create_population(int pop_size, int number_of_founders, int total_runtime, double morgan, int seed, bool writeToFile);
RcppExport SEXP _isoSIM_create_population(SEXP pop_sizeSEXP, SEXP number_of_foundersSEXP, SEXP total_runtimeSEXP, SEXP morganSEXP, SEXP seedSEXP, SEXP writeToFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_founders(number_of_foundersSEXP);
    Rcpp::traits::input_parameter< int >::type total_runtime(total_runtimeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type writeToFile(writeToFileSEXP);
    rcpp_result_gen = Rcpp::wrap(create_population(pop_size, number_of_founders, total_runtime, morgan, seed, writeToFile));
    return rcpp_result_gen;
END_RCPP
}
// create_femaleLine
List create_femaleLine(NumericVector v, int pop_size, int total_runtime, double morgan, int seed);
RcppExport SEXP _isoSIM_create_femaleLine(SEXP vSEXP, SEXP pop_sizeSEXP, SEXP total_runtimeSEXP, SEXP morganSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type total_runtime(total_runtimeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(create_femaleLine(v, pop_size, total_runtime, morgan, seed));
    return rcpp_result_gen;
END_RCPP
}
// create_two_populations_cpp
List create_two_populations_cpp(int pop_size, int number_of_founders, int total_runtime, double morgan, int seed, double overlap, bool writeToFile);
RcppExport SEXP _isoSIM_create_two_populations_cpp(SEXP pop_sizeSEXP, SEXP number_of_foundersSEXP, SEXP total_runtimeSEXP, SEXP morganSEXP, SEXP seedSEXP, SEXP overlapSEXP, SEXP writeToFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_founders(number_of_foundersSEXP);
    Rcpp::traits::input_parameter< int >::type total_runtime(total_runtimeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< bool >::type writeToFile(writeToFileSEXP);
    rcpp_result_gen = Rcpp::wrap(create_two_populations_cpp(pop_size, number_of_founders, total_runtime, morgan, seed, overlap, writeToFile));
    return rcpp_result_gen;
END_RCPP
}
// sim_inf_chrom
List sim_inf_chrom(int pop_size, double initial_heterozygosity, int total_runtime, double morgan, int markers, int seed);
RcppExport SEXP _isoSIM_sim_inf_chrom(SEXP pop_sizeSEXP, SEXP initial_heterozygositySEXP, SEXP total_runtimeSEXP, SEXP morganSEXP, SEXP markersSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type initial_heterozygosity(initial_heterozygositySEXP);
    Rcpp::traits::input_parameter< int >::type total_runtime(total_runtimeSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< int >::type markers(markersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_inf_chrom(pop_size, initial_heterozygosity, total_runtime, morgan, markers, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_isoSIM_calc_heterozygosity_cpp", (DL_FUNC) &_isoSIM_calc_heterozygosity_cpp, 1},
    {"_isoSIM_select_population_cpp", (DL_FUNC) &_isoSIM_select_population_cpp, 8},
    {"_isoSIM_calculate_summaryStats", (DL_FUNC) &_isoSIM_calculate_summaryStats, 2},
    {"_isoSIM_simulate_from_population", (DL_FUNC) &_isoSIM_simulate_from_population, 5},
    {"_isoSIM_create_population", (DL_FUNC) &_isoSIM_create_population, 6},
    {"_isoSIM_create_femaleLine", (DL_FUNC) &_isoSIM_create_femaleLine, 5},
    {"_isoSIM_create_two_populations_cpp", (DL_FUNC) &_isoSIM_create_two_populations_cpp, 7},
    {"_isoSIM_sim_inf_chrom", (DL_FUNC) &_isoSIM_sim_inf_chrom, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_isoSIM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
